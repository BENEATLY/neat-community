#!/usr/local/bin/python

################################################################################
# Author:     Thomas D'haenens
# License:    GPL-3.0
# Link:       https://github.com/BENEATLY/neat-community/
# Contact:    https://neatly.be/
################################################################################


# IMPORT: Standard Modules
import sys                                                                                      # System Lib
import json                                                                                     # JSON Lib
import os                                                                                       # OS Lib


# DEFINITIONS
checks = {'valid': [], 'invalid': []}


# FUNCTION: Read JSON File
def readJSONFile(file):
    with open(file) as content:
        return json.load(content)

# FUNCTION: Is Valid
def isValid(file):
    try:

        # Read File
        readJSONFile(file)

        # Valid
        checks['valid'].append(file)

    except:

        # Invalid
        checks['invalid'].append(file)


# DEFINITIONS: Config Files
configFiles = [
    {'subFolder': 'api', 'file': 'default.json'},
    {'subFolder': 'gui/symlink', 'file': 'default.json'},
    {'subFolder': 'gui/translations/original'},
    {'subFolder': 'gui', 'file': 'default.json'},
    {'subFolder': 'logging', 'file': 'default.json'},
    {'subFolder': 'messaging/consumer', 'file': 'default.json'},
    {'subFolder': 'messaging/producer', 'file': 'default.json'},
    {'subFolder': 'messaging/topic', 'file': 'default.json'},
    {'subFolder': 'service', 'file': 'default.json'},
    {'subFolder': 'table', 'file': 'default.json'},
    {'subFolder': 'table', 'file': 'internal.json'},
    {'file': 'db.json'},
    {'file': 'env.json'},
    {'file': 'location.json'},
    {'file': 'pluginRepo.json'},
    {'file': 'sqlEngine.json'}
]


# DETERMINE: Base Folder
if (os.path.isfile('/etc/neatly/base/location.json')):
    locationConfig = readJSONFile('/etc/neatly/base/location.json')
    baseFolder = locationConfig['config']
else:
    scriptFolder = os.path.dirname(os.path.abspath(__file__))
    baseFolder = os.path.abspath(os.path.join(scriptFolder, '../../config')) + '/'


# ITERATE: Config Files
for configFile in configFiles:

    # Construct File Path
    filePath = baseFolder + ((configFile['subFolder'] + '/') if ('subFolder' in configFile) else '') + (configFile['file'] if ('file' in configFile) else '')

    # Folder
    if ('file' not in configFile):

        # Get Files in Directory
        fileNames = next(os.walk(filePath))[2]

        # Filter (JSON Only)
        fileNames = [fileName for fileName in fileNames if fileName.endswith('.json')]

        # Iterate Files
        for fileName in fileNames:

            # Check if Valid Config File
            isValid(filePath + fileName)

    # File
    else:

        # Check if Valid Config File
        isValid(filePath)


# End Message
print('-> Verified ' + str(len(checks['valid']) + len(checks['invalid'])) + ' config files')
print('-> ' + str(len(checks['valid'])) + ' valid config files')
print('-> ' + str(len(checks['invalid'])) + ' invalid config files')

# Display Invalid Config Files
for file in checks['invalid']:
    print('-> Invalid config file: ' + str(file))